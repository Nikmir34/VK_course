{
"info": {
"_postman_id": "00063780-b7ab-4f6a-945b-662c8db197de",
"name": "Postman HW 2 Autotests",
"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
},
"item": [
{
"name": "#1 login",
"event": [
	{
		"listen": "test",
		"script": {
			"exec": [
				"let jsonData = JSON.parse(responseBody);\r",
				"postman.setEnvironmentVariable(\"token\", jsonData.token);"
			],
			"type": "text/javascript"
		}
	}
],
"request": {
	"method": "POST",
	"header": [],
	"body": {
		"mode": "formdata",
		"formdata": [
			{
				"key": "login",
				"value": "Nikita",
				"type": "text"
			},
			{
				"key": "password",
				"value": "test",
				"type": "text"
			}
		]
	},
	"url": {
		"raw": "{{url}}login",
		"host": [
			"{{url}}login"
		]
	}
},
"response": []
},
{
"name": "#2 user_info",
"event": [
	{
		"listen": "test",
		"script": {
			"exec": [
				"//1. Проверка статус кода 200\r",
				"pm.test(\"Status code is 200\", function () {\r",
				"    pm.response.to.have.status(200);\r",
				"});\r",
				"\r",
				"const jsonData = pm.response.json();\r",
				"//2. Проверка структуры Json в ответе\r",
				"let shema = {\r",
				"    \"type\" : \"object\",\r",
				"    \"required\" : [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"],\r",
				"    \"properties\": {\r",
				"        \"person\" : {\r",
				"            \"type\" : \"object\",\r",
				"            \"required\" : [\"u_age\", \"u_name\", \"u_salary_1_5_year\"],\r",
				"            \"properties\" : {\r",
				"                \"u_age\" : {\"type\" : \"integer\"},\r",
				"                \"u_name\" : {\"type\" : \"array\"},\r",
				"                \"u_salary_1_5_year\" : {\"type\" : \"integer\"}\r",
				"            }\r",
				"        },\r",
				"        \"qa_salary_after_12_months\" : {\"type\" : \"integer\"},\r",
				"        \"qa_salary_after_6_months\" : {\"type\" : \"integer\"},\r",
				"        \"start_qa_salary\" : {\"type\" : \"integer\"}\r",
				"    }\r",
				"};\r",
				"\r",
				"pm.test('JSON shema is valid', () => {pm.response.to.have.jsonSchema(shema);\r",
				"})\r",
				"\r",
				"//3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
				"let req = JSON.parse(request.data)\r",
				"let salary = parseInt(req.salary)\r",
				"\r",
				"pm.test('Check multiplier start_qa_salary', () => {\r",
				"    pm.expect(jsonData.start_qa_salary).to.eql(salary)\r",
				"});\r",
				"\r",
				"pm.test('Check multiplier qa_salary_after_6_months', () => {\r",
				"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary * 2)\r",
				"});\r",
				"\r",
				"pm.test('Check multiplier qa_salary_after_12_months', () => {\r",
				"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary * 2.9)\r",
				"});\r",
				"\r",
				"pm.test('Check multiplier u_salary_1.5_year', () => {\r",
				"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary * 4)\r",
				"});\r",
				"\r",
				"//4. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
				"postman.setEnvironmentVariable(\"salary\", jsonData.person.u_salary_1_5_year);"
			],
			"type": "text/javascript"
		}
	}
],
"request": {
	"method": "POST",
	"header": [],
	"body": {
		"mode": "raw",
		"raw": "{\r\n    \"age\": \"30\",\r\n    \"salary\": \"30000\",\r\n    \"name\": \"Nikita\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
		"options": {
			"raw": {
				"language": "json"
			}
		}
	},
	"url": {
		"raw": "{{url}}user_info",
		"host": [
			"{{url}}user_info"
		]
	}
},
"response": []
},
{
"name": "#3 new_data",
"event": [
	{
		"listen": "test",
		"script": {
			"exec": [
				"//1. Проверка статус кода 200\r",
				"pm.test(\"Status code is 200\", function () {\r",
				"    pm.response.to.have.status(200);\r",
				"});\r",
				"\r",
				"const jsonData = pm.response.json();\r",
				"\r",
				"//2. Проверка структуры Json в ответе\r",
				"let shema = {\r",
				"    \"type\" : \"object\",\r",
				"    \"required\" : [\"age\", \"name\", \"salary\"],\r",
				"    \"properties\": {\r",
				"        \"age\" : {\"type\" : \"integer\"},\r",
				"        \"name\" : {\"type\" : \"string\"},\r",
				"        \"salary\" : {\"type\" : \"array\"}\r",
				"    }\r",
				"};\r",
				"\r",
				"pm.test('JSON shema is valid', () => {pm.response.to.have.jsonSchema(shema);\r",
				"})\r",
				"\r",
				"//3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
				"let req = request.data;\r",
				"let salary =  parseInt(req.salary)\r",
				"\r",
				"pm.test('Check multiplier salary[0]', () => {\r",
				"    pm.expect(jsonData.salary[0]).to.eql(salary)\r",
				"});\r",
				"\r",
				"pm.test('Check multiplier salary[1]', () => {\r",
				"    pm.expect(parseInt(jsonData.salary[1])).to.eql(salary * 2)\r",
				"});\r",
				"\r",
				"pm.test('Check multiplier salary[2]', () => {\r",
				"    pm.expect(parseInt(jsonData.salary[2])).to.eql(salary * 3)\r",
				"});\r",
				"\r",
				"//4. Проверить, что 2-й элемент  массива salary больше 1-го и 0-го\r",
				"pm.test('Comparing array elements salary[2]>salary[1]', () => {\r",
				"    pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[1]))\r",
				"});\r",
				"\r",
				"pm.test('Comparing array elements salary[2]>salary[0]', () => {\r",
				"    pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[0]))\r",
				"});"
			],
			"type": "text/javascript"
		}
	}
],
"request": {
	"method": "POST",
	"header": [],
	"body": {
		"mode": "formdata",
		"formdata": [
			{
				"key": "age",
				"value": "24",
				"type": "text"
			},
			{
				"key": "salary",
				"value": "30000",
				"type": "text"
			},
			{
				"key": "name",
				"value": "Nikita",
				"type": "text"
			},
			{
				"key": "auth_token",
				"value": "{{token}}",
				"type": "text"
			}
		]
	},
	"url": {
		"raw": "{{url}}/new_data",
		"host": [
			"{{url}}"
		],
		"path": [
			"new_data"
		]
	}
},
"response": []
},
{
"name": "#4 test_pet_info",
"event": [
	{
		"listen": "test",
		"script": {
			"exec": [
				"//1. Проверка статус кода 200\r",
				"pm.test(\"Status code is 200\", function () {\r",
				"    pm.response.to.have.status(200);\r",
				"});\r",
				"\r",
				"const jsonData = pm.response.json();\r",
				"\r",
				"//2. Проверка структуры Json в ответе\r",
				"let shema = {\r",
				"    \"type\" : \"object\",\r",
				"    \"required\" : [\"age\", \"name\", \"daily_food\", \"daily_sleep\"],\r",
				"    \"properties\": {\r",
				"       \"age\" : {\"type\" : \"integer\"},\r",
				"       \"name\" : {\"type\" : \"string\"},\r",
				"       \"daily_food\" : {\"type\" : \"number\"},\r",
				"       \"daily_sleep\" : {\"type\" : \"number\"} \r",
				"    }\r",
				"};\r",
				"\r",
				"pm.test('JSON shema is valid', () => {pm.response.to.have.jsonSchema(shema);\r",
				"}) \r",
				"\r",
				"//3. В ответе указаны коэффициенты умножени weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r"     
				"'daily food' : weight * 0,012 , 'daily sleep' : weight * 2,5\r",
				"let req = request.data;\r",
				"let weight = parseInt(req.weight)\r",
				"\r",
				"pm.test('Check multiplier daily_food', () => {\r",
				"    pm.expect(jsonData.daily_food).to.eql(weight * 0.012)\r",
				"});\r",
				"\r",
				"pm.test('Check multiplier daily_sleep', () => {\r",
				"    pm.expect(jsonData.daily_sleep).to.eql(weight * 2.5)\r",
				"});\r",
				"\r",
				"\r",
				""
			],
			"type": "text/javascript"
		}
	}
],
"request": {
	"method": "POST",
	"header": [],
	"body": {
		"mode": "formdata",
		"formdata": [
			{
				"key": "age",
				"value": "3",
				"type": "text"
			},
			{
				"key": "weight",
				"value": "5",
				"type": "text"
			},
			{
				"key": "name",
				"value": "Cat",
				"type": "text"
			},
			{
				"key": "auth_token",
				"value": "{{token}}",
				"type": "text"
			}
		]
	},
	"url": {
		"raw": "{{url}}/test_pet_info",
		"host": [
			"{{url}}"
		],
		"path": [
			"test_pet_info"
		]
	}
},
"response": []
},
{
"name": "#5 get_test_user",
"event": [
	{
		"listen": "test",
		"script": {
			"exec": [
				" //1. Проверка статус кода 200\r",
				"pm.test(\"Status code is 200\", function () {\r",
				"    pm.response.to.have.status(200);\r",
				"});\r",
				"\r",
				"const jsonData = pm.response.json();   \r",
				"\r",
				"//2. Проверка структуры Json в ответе\r",
				"let shema = {\r",
				"    \"type\" : \"object\",\r",
				"    \"required\" : [\"age\", \"family\", \"name\", \"salary\"],\r",
				"    \"properties\" : {\r",
				"        \"age\" : {\"type\" : \"string\"},\r",
				"        \"family\" : {\r",
				"            \"type\" : \"object\",\r",
				"            \"required\" : [\"children\", \"u_salary_1_5_year\"],\r",
				"            \"properties\" : {\r",
				"                \"children\" : {\"type\" : \"array\"},\r",
				"                \"u_salary_1_5_year\" : {\"type\" : \"integer\"}\r",
				"            }\r",
				"        },\r",
				"        \"name\" : {\"type\" : \"string\"},\r",
				"        \"salary\" : {\"type\" : \"integer\"}\r",
				"    }\r",
				"};\r",
				"\r",
				"pm.test('JSON shema is valid', () => {pm.response.to.have.jsonSchema(shema);\r",
				"})\r",
				"\r",
				"//3. Проверить что значение поля name = значению переменной name из окружения\r",
				"let req = request.data;\r",
				"\r",
				"pm.test('Compare value name', () => {\r",
				"    pm.expect(jsonData.name).to.eql(req.name);\r",
				"});\r",
				"\r",
				"//4. Проверить значение поля age в ответе соответствует отправленному в запросе значению поля age \r",
				"pm.test('Compare value age', () => {\r",
				"    pm.expect(jsonData.age).to.eql(req.age);\r",
				"});\r",
				""
			],
			"type": "text/javascript"
		}
	}
],
"request": {
	"method": "POST",
	"header": [],
	"body": {
		"mode": "formdata",
		"formdata": [
			{
				"key": "age",
				"value": "24",
				"type": "text"
			},
			{
				"key": "salary",
				"value": "{{salary}}",
				"type": "text"
			},
			{
				"key": "name",
				"value": "Nikita",
				"type": "text"
			},
			{
				"key": "auth_token",
				"value": "{{token}}",
				"type": "text"
			}
		]
	},
	"url": {
		"raw": "{{url}}/get_test_user",
		"host": [
			"{{url}}"
		],
		"path": [
			"get_test_user"
		]
	}
},
"response": []
},
{
"name": "#6 currency",
"event": [
	{
		"listen": "test",
		"script": {
			"exec": [
				"let jsonData = JSON.parse(responseBody);\r",
				"value = jsonData[Math.floor(Math.random() * jsonData.length)];\r",
				"pm.environment.set(\"curr_code\", value.Cur_ID);\r",
				"let responseJson = pm.response.json();\r",
				"\r",
				"\r",
				"for ( let i = 0; i < responseJson.length; i++ ) { \r",
				"    \r",
				"    let currency = responseJson[i];\r",
				"    let currencyArr = Object.values(currency);\r",
				"    let currencyID = currencyArr[1];\r",
				"\r",
				"        pm.sendRequest ({\r",
				"        url: 'http://162.55.220.72:5005/curr_byn',\r",
				"        method: 'POST',\r",
				"        header: {\r",
				"            'Content-Type': 'multipart/form-data'\r",
				"        },\r",
				"        body: {\r",
				"            mode: 'formdata',\r",
				"            formdata: [\r",
				"                { key: \"auth_token\", value: pm.environment.get('token'), disabled: false, description: { content: \"\", type: \"text/plain\" } },\r",
				"                { key: \"curr_code\", value: currencyID, disabled: false, description: { content: \"\", type: \"text/plain\" } }\r",
				"            ]\r",
				"        }\r",
				"    }, function (err, res)  {\r",
				"        let statusCode = Object.values(res)[3];\r",
				"            if (statusCode == 200) {\r",
				"            let resultCurrency = res.json();\r",
				"            if ('200' !== typeof resultCurrency.Cur_OfficialRate) {\r",
				"             console.log(resultCurrency);   \r",
				"            }\r",
				"            \r",
				"        }\r",
				"    });\r",
				"\r",
				"};\r",
				"    \r",
				"\r",
				"\r",
				"\r",
				"\r",
				"\r",
				""
			],
			"type": "text/javascript"
		}
	}
],
"request": {
	"method": "POST",
	"header": [],
	"body": {
		"mode": "formdata",
		"formdata": [
			{
				"key": "auth_token",
				"value": "{{token}}",
				"type": "text"
			}
		]
	},
	"url": {
		"raw": "{{url}}/currency",
		"host": [
			"{{url}}"
		],
		"path": [
			"currency"
		]
	}
},
"response": []
},
{
"name": "#7 curr_byn",
"event": [
	{
		"listen": "test",
		"script": {
			"exec": [
				"//1. Проверка статус кода 200\r",
				"pm.test(\"Status code is 200\", function () {\r",
				"    pm.response.to.have.status(200);\r",
				"});\r",
				"\r",
				"const jsonData = pm.response.json(); \r",
				"\r",
				"//2. Проверка структуры Json в ответе\r",
				"let shema = {\r",
				"    \"type\" : \"object\",\r",
				"    \"required\" : [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"],\r",
				"    \"properties\" : {\r",
				"        \"Cur_Abbreviation\" : {\"type\" : \"string\"},\r",
				"        \"Cur_ID\" : {\"type\" : \"integer\"},\r",
				"        \"Cur_Name\" : {\"type\" : \"string\"},\r",
				"        \"Cur_OfficialRate\" : {\"type\" : \"number\"},\r",
				"        \"Cur_Scale\" : {\"type\" : \"integer\"},\r",
				"        \"Date\" : {\"type\" : \"string\"}\r",
				"    }\r",
				"};\r",
				"\r",
				"pm.test('JSON shema is valid', () => {pm.response.to.have.jsonSchema(shema);\r",
				"})\r",
				""
			],
			"type": "text/javascript"
		}
	}
],
"request": {
	"method": "POST",
	"header": [],
	"body": {
		"mode": "formdata",
		"formdata": [
			{
				"key": "auth_token",
				"value": "{{token}}",
				"type": "text"
			},
			{
				"key": "curr_code",
				"value": "{{curr_code}}",
				"type": "text"
			}
		]
	},
	"url": {
		"raw": "{{url}}/curr_byn",
		"host": [
			"{{url}}"
		],
		"path": [
			"curr_byn"
		]
	}
},
"response": []
}
]
}
